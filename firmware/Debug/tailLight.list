
tailLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ba4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cd4  08001cd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cd4  08001cd4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cd4  08001cd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd4  08001cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cd8  08001cd8  00011cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001ce8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001ce8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b8e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001424  00000000  00000000  00027bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00028fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00029920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016620  00000000  00000000  0002a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009402  00000000  00000000  000407d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008418d  00000000  00000000  00049bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdd5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f0  00000000  00000000  000cddb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c98 	.word	0x08001c98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c98 	.word	0x08001c98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa70 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f836 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8e6 	bl	8000328 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015c:	f000 f874 	bl	8000248 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000160:	2064      	movs	r0, #100	; 0x64
 8000162:	f000 fac9 	bl	80006f8 <HAL_Delay>
  HAL_GPIO_WritePin(VLED_EN_GPIO_Port, VLED_EN_Pin, SET); //toggle VLED enable PB15
 8000166:	2201      	movs	r2, #1
 8000168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800016c:	4813      	ldr	r0, [pc, #76]	; (80001bc <main+0x70>)
 800016e:	f000 fd4f 	bl	8000c10 <HAL_GPIO_WritePin>
  Start_PWM();
 8000172:	f000 f957 	bl	8000424 <Start_PWM>
//	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, RESET);
//	  HAL_Delay(100);
	  //HAL_GPIO_TogglePin(VLED_EN_GPIO_Port, VLED_EN_Pin); //toggle VLED enable PB15
	  //HAL_Delay(100);
	  //HAL_GPIO_TogglePin(BRAKE_EN_GPIO_Port, BRAKE_EN_Pin);
	  HAL_Delay(500);
 8000176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017a:	f000 fabd 	bl	80006f8 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50);  //
 800017e:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <main+0x74>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2232      	movs	r2, #50	; 0x32
 8000184:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <main+0x74>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800018e:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 50);
 8000190:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <main+0x74>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	2232      	movs	r2, #50	; 0x32
 8000196:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(500);
 8000198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800019c:	f000 faac 	bl	80006f8 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  //
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <main+0x74>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2200      	movs	r2, #0
 80001a6:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <main+0x74>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <main+0x74>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2200      	movs	r2, #0
 80001b6:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(500);
 80001b8:	e7dd      	b.n	8000176 <main+0x2a>
 80001ba:	bf00      	nop
 80001bc:	40010c00 	.word	0x40010c00
 80001c0:	20000028 	.word	0x20000028

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fd58 	bl	8001c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f6:	2300      	movs	r3, #0
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80001fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fd1b 	bl	8000c40 <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000210:	f000 f91a 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f000 ff88 	bl	8001144 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023a:	f000 f905 	bl	8000448 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	; 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08a      	sub	sp, #40	; 0x28
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800024e:	f107 0320 	add.w	r3, r7, #32
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800026a:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <MX_TIM3_Init+0xd8>)
 800026c:	4a2d      	ldr	r2, [pc, #180]	; (8000324 <MX_TIM3_Init+0xdc>)
 800026e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8000270:	4b2b      	ldr	r3, [pc, #172]	; (8000320 <MX_TIM3_Init+0xd8>)
 8000272:	220a      	movs	r2, #10
 8000274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <MX_TIM3_Init+0xd8>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <MX_TIM3_Init+0xd8>)
 800027e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000284:	4b26      	ldr	r3, [pc, #152]	; (8000320 <MX_TIM3_Init+0xd8>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <MX_TIM3_Init+0xd8>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000290:	4823      	ldr	r0, [pc, #140]	; (8000320 <MX_TIM3_Init+0xd8>)
 8000292:	f001 f8b5 	bl	8001400 <HAL_TIM_PWM_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800029c:	f000 f8d4 	bl	8000448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002a0:	2300      	movs	r3, #0
 80002a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80002a8:	f107 0320 	add.w	r3, r7, #32
 80002ac:	4619      	mov	r1, r3
 80002ae:	481c      	ldr	r0, [pc, #112]	; (8000320 <MX_TIM3_Init+0xd8>)
 80002b0:	f001 fc68 	bl	8001b84 <HAL_TIMEx_MasterConfigSynchronization>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80002ba:	f000 f8c5 	bl	8000448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002be:	2360      	movs	r3, #96	; 0x60
 80002c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	4619      	mov	r1, r3
 80002d4:	4812      	ldr	r0, [pc, #72]	; (8000320 <MX_TIM3_Init+0xd8>)
 80002d6:	f001 f985 	bl	80015e4 <HAL_TIM_PWM_ConfigChannel>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80002e0:	f000 f8b2 	bl	8000448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2208      	movs	r2, #8
 80002e8:	4619      	mov	r1, r3
 80002ea:	480d      	ldr	r0, [pc, #52]	; (8000320 <MX_TIM3_Init+0xd8>)
 80002ec:	f001 f97a 	bl	80015e4 <HAL_TIM_PWM_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80002f6:	f000 f8a7 	bl	8000448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	220c      	movs	r2, #12
 80002fe:	4619      	mov	r1, r3
 8000300:	4807      	ldr	r0, [pc, #28]	; (8000320 <MX_TIM3_Init+0xd8>)
 8000302:	f001 f96f 	bl	80015e4 <HAL_TIM_PWM_ConfigChannel>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800030c:	f000 f89c 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000310:	4803      	ldr	r0, [pc, #12]	; (8000320 <MX_TIM3_Init+0xd8>)
 8000312:	f000 f8ef 	bl	80004f4 <HAL_TIM_MspPostInit>

}
 8000316:	bf00      	nop
 8000318:	3728      	adds	r7, #40	; 0x28
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	40000400 	.word	0x40000400

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033c:	4b35      	ldr	r3, [pc, #212]	; (8000414 <MX_GPIO_Init+0xec>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a34      	ldr	r2, [pc, #208]	; (8000414 <MX_GPIO_Init+0xec>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b32      	ldr	r3, [pc, #200]	; (8000414 <MX_GPIO_Init+0xec>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0310 	and.w	r3, r3, #16
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <MX_GPIO_Init+0xec>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <MX_GPIO_Init+0xec>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <MX_GPIO_Init+0xec>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_GPIO_Init+0xec>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a28      	ldr	r2, [pc, #160]	; (8000414 <MX_GPIO_Init+0xec>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_GPIO_Init+0xec>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4823      	ldr	r0, [pc, #140]	; (8000418 <MX_GPIO_Init+0xf0>)
 800038c:	f000 fc40 	bl	8000c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_EN_Pin|GRN_EN_Pin|BLU_EN_Pin|VLED_EN_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f648 4104 	movw	r1, #35844	; 0x8c04
 8000396:	4821      	ldr	r0, [pc, #132]	; (800041c <MX_GPIO_Init+0xf4>)
 8000398:	f000 fc3a 	bl	8000c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800039c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80003a2:	2311      	movs	r3, #17
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2302      	movs	r3, #2
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	4818      	ldr	r0, [pc, #96]	; (8000418 <MX_GPIO_Init+0xf0>)
 80003b6:	f000 faa7 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SW_CS_Pin PA10 */
  GPIO_InitStruct.Pin = EXT_SW_CS_Pin|GPIO_PIN_10;
 80003ba:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80003be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	4814      	ldr	r0, [pc, #80]	; (8000420 <MX_GPIO_Init+0xf8>)
 80003d0:	f000 fa9a 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_EN_Pin GRN_EN_Pin BLU_EN_Pin VLED_EN_Pin */
  GPIO_InitStruct.Pin = RED_EN_Pin|GRN_EN_Pin|BLU_EN_Pin|VLED_EN_Pin;
 80003d4:	f648 4304 	movw	r3, #35844	; 0x8c04
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <MX_GPIO_Init+0xf4>)
 80003ee:	f000 fa8b 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_TURN_IN_Pin PB7 */
  GPIO_InitStruct.Pin = EXT_TURN_IN_Pin|GPIO_PIN_7;
 80003f2:	23c0      	movs	r3, #192	; 0xc0
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_GPIO_Init+0xf4>)
 8000406:	f000 fa7f 	bl	8000908 <HAL_GPIO_Init>

}
 800040a:	bf00      	nop
 800040c:	3720      	adds	r7, #32
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	40011000 	.word	0x40011000
 800041c:	40010c00 	.word	0x40010c00
 8000420:	40010800 	.word	0x40010800

08000424 <Start_PWM>:
	}

}

void Start_PWM(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start PWM for EXT_SW_EN
 8000428:	2100      	movs	r1, #0
 800042a:	4806      	ldr	r0, [pc, #24]	; (8000444 <Start_PWM+0x20>)
 800042c:	f001 f838 	bl	80014a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  // Start PWM for BRAKE_EN
 8000430:	2108      	movs	r1, #8
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <Start_PWM+0x20>)
 8000434:	f001 f834 	bl	80014a0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);  // Start PWM for BACKUP_EN
 8000438:	210c      	movs	r1, #12
 800043a:	4802      	ldr	r0, [pc, #8]	; (8000444 <Start_PWM+0x20>)
 800043c:	f001 f830 	bl	80014a0 <HAL_TIM_PWM_Start>
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	e7fe      	b.n	8000450 <Error_Handler+0x8>
	...

08000454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <HAL_MspInit+0x5c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_MspInit+0x5c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <HAL_MspInit+0x60>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <HAL_MspInit+0x60>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a09      	ldr	r2, [pc, #36]	; (80004ec <HAL_TIM_PWM_MspInit+0x34>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d10b      	bne.n	80004e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_TIM_PWM_MspInit+0x38>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_TIM_PWM_MspInit+0x38>)
 80004d0:	f043 0302 	orr.w	r3, r3, #2
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_TIM_PWM_MspInit+0x38>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40000400 	.word	0x40000400
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <HAL_TIM_MspPostInit+0x88>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d12f      	bne.n	8000574 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <HAL_TIM_MspPostInit+0x8c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <HAL_TIM_MspPostInit+0x8c>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <HAL_TIM_MspPostInit+0x8c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_TIM_MspPostInit+0x8c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <HAL_TIM_MspPostInit+0x8c>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_TIM_MspPostInit+0x8c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0308 	and.w	r3, r3, #8
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = EXT_SW_EN_Pin;
 8000544:	2340      	movs	r3, #64	; 0x40
 8000546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EXT_SW_EN_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <HAL_TIM_MspPostInit+0x90>)
 8000558:	f000 f9d6 	bl	8000908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BRAKE_EN_Pin|BACKUP_EN_Pin;
 800055c:	2303      	movs	r3, #3
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <HAL_TIM_MspPostInit+0x94>)
 8000570:	f000 f9ca 	bl	8000908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40000400 	.word	0x40000400
 8000580:	40021000 	.word	0x40021000
 8000584:	40010800 	.word	0x40010800
 8000588:	40010c00 	.word	0x40010c00

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f875 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}

080005da <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff fff7 	bl	80005da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ee:	490c      	ldr	r1, [pc, #48]	; (8000620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000604:	4c09      	ldr	r4, [pc, #36]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 fb15 	bl	8001c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fd99 	bl	800014c <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000624:	08001cdc 	.word	0x08001cdc
  ldr r2, =_sbss
 8000628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800062c:	20000074 	.word	0x20000074

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f92b 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff ff00 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f935 	bl	80008ee <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 f90b 	bl	80008b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000070 	.word	0x20000070

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000070 	.word	0x20000070

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff fff0 	bl	80006e4 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffe0 	bl	80006e4 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	; 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	; 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff90 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff49 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c8:	f7ff ff5e 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff ff90 	bl	80007f8 <NVIC_EncodePriority>
 80008d8:	4602      	mov	r2, r0
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff5f 	bl	80007a4 <__NVIC_SetPriority>
}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffb0 	bl	800085c <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	b480      	push	{r7}
 800090a:	b08b      	sub	sp, #44	; 0x2c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e169      	b.n	8000bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800091c:	2201      	movs	r2, #1
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	429a      	cmp	r2, r3
 8000936:	f040 8158 	bne.w	8000bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a9a      	ldr	r2, [pc, #616]	; (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d05e      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000944:	4a98      	ldr	r2, [pc, #608]	; (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d875      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800094a:	4a98      	ldr	r2, [pc, #608]	; (8000bac <HAL_GPIO_Init+0x2a4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d058      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000950:	4a96      	ldr	r2, [pc, #600]	; (8000bac <HAL_GPIO_Init+0x2a4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d86f      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000956:	4a96      	ldr	r2, [pc, #600]	; (8000bb0 <HAL_GPIO_Init+0x2a8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d052      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 800095c:	4a94      	ldr	r2, [pc, #592]	; (8000bb0 <HAL_GPIO_Init+0x2a8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d869      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000962:	4a94      	ldr	r2, [pc, #592]	; (8000bb4 <HAL_GPIO_Init+0x2ac>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d04c      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000968:	4a92      	ldr	r2, [pc, #584]	; (8000bb4 <HAL_GPIO_Init+0x2ac>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d863      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800096e:	4a92      	ldr	r2, [pc, #584]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d046      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000974:	4a90      	ldr	r2, [pc, #576]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d85d      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d82a      	bhi.n	80009d4 <HAL_GPIO_Init+0xcc>
 800097e:	2b12      	cmp	r3, #18
 8000980:	d859      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <HAL_GPIO_Init+0x80>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000a03 	.word	0x08000a03
 800098c:	080009dd 	.word	0x080009dd
 8000990:	080009ef 	.word	0x080009ef
 8000994:	08000a31 	.word	0x08000a31
 8000998:	08000a37 	.word	0x08000a37
 800099c:	08000a37 	.word	0x08000a37
 80009a0:	08000a37 	.word	0x08000a37
 80009a4:	08000a37 	.word	0x08000a37
 80009a8:	08000a37 	.word	0x08000a37
 80009ac:	08000a37 	.word	0x08000a37
 80009b0:	08000a37 	.word	0x08000a37
 80009b4:	08000a37 	.word	0x08000a37
 80009b8:	08000a37 	.word	0x08000a37
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a37 	.word	0x08000a37
 80009c4:	08000a37 	.word	0x08000a37
 80009c8:	08000a37 	.word	0x08000a37
 80009cc:	080009e5 	.word	0x080009e5
 80009d0:	080009f9 	.word	0x080009f9
 80009d4:	4a79      	ldr	r2, [pc, #484]	; (8000bbc <HAL_GPIO_Init+0x2b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009da:	e02c      	b.n	8000a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e029      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	3304      	adds	r3, #4
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e024      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	3308      	adds	r3, #8
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e01f      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	330c      	adds	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e01a      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e013      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	611a      	str	r2, [r3, #16]
          break;
 8000a22:	e009      	b.n	8000a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	615a      	str	r2, [r3, #20]
          break;
 8000a2e:	e003      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          break;
 8000a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2bff      	cmp	r3, #255	; 0xff
 8000a3c:	d801      	bhi.n	8000a42 <HAL_GPIO_Init+0x13a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	e001      	b.n	8000a46 <HAL_GPIO_Init+0x13e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2bff      	cmp	r3, #255	; 0xff
 8000a4c:	d802      	bhi.n	8000a54 <HAL_GPIO_Init+0x14c>
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_Init+0x152>
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	3b08      	subs	r3, #8
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	210f      	movs	r1, #15
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	6a39      	ldr	r1, [r7, #32]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 80b1 	beq.w	8000bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a88:	4b4d      	ldr	r3, [pc, #308]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa0:	4a48      	ldr	r2, [pc, #288]	; (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <HAL_GPIO_Init+0x2c0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1ec>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	; (8000bcc <HAL_GPIO_Init+0x2c4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1e8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3e      	ldr	r2, [pc, #248]	; (8000bd0 <HAL_GPIO_Init+0x2c8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1e4>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3d      	ldr	r2, [pc, #244]	; (8000bd4 <HAL_GPIO_Init+0x2cc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1e0>
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000ae8:	2304      	movs	r3, #4
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af4:	2300      	movs	r3, #0
 8000af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b06:	492f      	ldr	r1, [pc, #188]	; (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	492c      	ldr	r1, [pc, #176]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4928      	ldr	r1, [pc, #160]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	4922      	ldr	r1, [pc, #136]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60cb      	str	r3, [r1, #12]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	491e      	ldr	r1, [pc, #120]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4918      	ldr	r1, [pc, #96]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d021      	beq.n	8000bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	600b      	str	r3, [r1, #0]
 8000ba4:	e021      	b.n	8000bea <HAL_GPIO_Init+0x2e2>
 8000ba6:	bf00      	nop
 8000ba8:	10320000 	.word	0x10320000
 8000bac:	10310000 	.word	0x10310000
 8000bb0:	10220000 	.word	0x10220000
 8000bb4:	10210000 	.word	0x10210000
 8000bb8:	10120000 	.word	0x10120000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40011000 	.word	0x40011000
 8000bd4:	40011400 	.word	0x40011400
 8000bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_GPIO_Init+0x304>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4909      	ldr	r1, [pc, #36]	; (8000c0c <HAL_GPIO_Init+0x304>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	3301      	adds	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f47f ae8e 	bne.w	800091c <HAL_GPIO_Init+0x14>
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	372c      	adds	r7, #44	; 0x2c
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c20:	787b      	ldrb	r3, [r7, #1]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c2c:	e003      	b.n	8000c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	041a      	lsls	r2, r3, #16
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	611a      	str	r2, [r3, #16]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e272      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8087 	beq.w	8000d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c60:	4b92      	ldr	r3, [pc, #584]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d00c      	beq.n	8000c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c6c:	4b8f      	ldr	r3, [pc, #572]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d112      	bne.n	8000c9e <HAL_RCC_OscConfig+0x5e>
 8000c78:	4b8c      	ldr	r3, [pc, #560]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c84:	d10b      	bne.n	8000c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c86:	4b89      	ldr	r3, [pc, #548]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d06c      	beq.n	8000d6c <HAL_RCC_OscConfig+0x12c>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d168      	bne.n	8000d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e24c      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca6:	d106      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x76>
 8000ca8:	4b80      	ldr	r3, [pc, #512]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a7f      	ldr	r2, [pc, #508]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e02e      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x98>
 8000cbe:	4b7b      	ldr	r3, [pc, #492]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a7a      	ldr	r2, [pc, #488]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b78      	ldr	r3, [pc, #480]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a77      	ldr	r2, [pc, #476]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e01d      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0xbc>
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a71      	ldr	r2, [pc, #452]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a6e      	ldr	r2, [pc, #440]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e00b      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a6a      	ldr	r2, [pc, #424]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b68      	ldr	r3, [pc, #416]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a67      	ldr	r2, [pc, #412]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fce2 	bl	80006e4 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fcde 	bl	80006e4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e200      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0xe4>
 8000d42:	e014      	b.n	8000d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fcce 	bl	80006e4 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fcca 	bl	80006e4 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e1ec      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b53      	ldr	r3, [pc, #332]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x10c>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d063      	beq.n	8000e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d11c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x18c>
 8000d92:	4b46      	ldr	r3, [pc, #280]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d116      	bne.n	8000dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x176>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e1c0      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4939      	ldr	r1, [pc, #228]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	e03a      	b.n	8000e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d020      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fc83 	bl	80006e4 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de2:	f7ff fc7f 	bl	80006e4 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e1a1      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4927      	ldr	r1, [pc, #156]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e10:	4313      	orrs	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
 8000e14:	e015      	b.n	8000e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc62 	bl	80006e4 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fc5e 	bl	80006e4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e180      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d03a      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d019      	beq.n	8000e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_RCC_OscConfig+0x274>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc42 	bl	80006e4 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc3e 	bl	80006e4 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e160      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f0      	beq.n	8000e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fa9e 	bl	80013c4 <RCC_Delay>
 8000e88:	e01c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_RCC_OscConfig+0x274>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fc28 	bl	80006e4 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e96:	e00f      	b.n	8000eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc24 	bl	80006e4 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d908      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e146      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	42420000 	.word	0x42420000
 8000eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e9      	bne.n	8000e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80a6 	beq.w	800101e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed6:	4b8b      	ldr	r3, [pc, #556]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10d      	bne.n	8000efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a87      	ldr	r2, [pc, #540]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b85      	ldr	r3, [pc, #532]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efa:	2301      	movs	r3, #1
 8000efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efe:	4b82      	ldr	r3, [pc, #520]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d118      	bne.n	8000f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0a:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7e      	ldr	r2, [pc, #504]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fbe5 	bl	80006e4 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff fbe1 	bl	80006e4 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e103      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	4b75      	ldr	r3, [pc, #468]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d106      	bne.n	8000f52 <HAL_RCC_OscConfig+0x312>
 8000f44:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	e02d      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x334>
 8000f5a:	4b6a      	ldr	r3, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a69      	ldr	r2, [pc, #420]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	4b67      	ldr	r3, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a66      	ldr	r2, [pc, #408]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	6213      	str	r3, [r2, #32]
 8000f72:	e01c      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d10c      	bne.n	8000f96 <HAL_RCC_OscConfig+0x356>
 8000f7c:	4b61      	ldr	r3, [pc, #388]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	4a60      	ldr	r2, [pc, #384]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6213      	str	r3, [r2, #32]
 8000f88:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a5d      	ldr	r2, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6213      	str	r3, [r2, #32]
 8000f94:	e00b      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f96:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a5a      	ldr	r2, [pc, #360]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b58      	ldr	r3, [pc, #352]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a57      	ldr	r2, [pc, #348]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f023 0304 	bic.w	r3, r3, #4
 8000fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d015      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb95 	bl	80006e4 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fb91 	bl	80006e4 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e0b1      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0ee      	beq.n	8000fbe <HAL_RCC_OscConfig+0x37e>
 8000fe0:	e014      	b.n	800100c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fb7f 	bl	80006e4 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff fb7b 	bl	80006e4 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e09b      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001000:	4b40      	ldr	r3, [pc, #256]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1ee      	bne.n	8000fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d105      	bne.n	800101e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a3b      	ldr	r2, [pc, #236]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8087 	beq.w	8001136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d061      	beq.n	80010f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d146      	bne.n	80010ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103c:	4b33      	ldr	r3, [pc, #204]	; (800110c <HAL_RCC_OscConfig+0x4cc>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb4f 	bl	80006e4 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fb4b 	bl	80006e4 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e06d      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001070:	d108      	bne.n	8001084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	4921      	ldr	r1, [pc, #132]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a19      	ldr	r1, [r3, #32]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	430b      	orrs	r3, r1
 8001096:	491b      	ldr	r1, [pc, #108]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_RCC_OscConfig+0x4cc>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb1f 	bl	80006e4 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb1b 	bl	80006e4 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e03d      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x46a>
 80010c8:	e035      	b.n	8001136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_RCC_OscConfig+0x4cc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fb08 	bl	80006e4 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fb04 	bl	80006e4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e026      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x498>
 80010f6:	e01e      	b.n	8001136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e019      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
 8001104:	40021000 	.word	0x40021000
 8001108:	40007000 	.word	0x40007000
 800110c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_RCC_OscConfig+0x500>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	429a      	cmp	r2, r3
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	429a      	cmp	r2, r3
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0d0      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d910      	bls.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 0207 	bic.w	r2, r3, #7
 800116e:	4965      	ldr	r1, [pc, #404]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001176:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0b8      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d020      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a0:	4b59      	ldr	r3, [pc, #356]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a58      	ldr	r2, [pc, #352]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b8:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a52      	ldr	r2, [pc, #328]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c4:	4b50      	ldr	r3, [pc, #320]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	494d      	ldr	r1, [pc, #308]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d040      	beq.n	8001264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d115      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e07f      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e073      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06b      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f023 0203 	bic.w	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4936      	ldr	r1, [pc, #216]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001234:	f7ff fa56 	bl	80006e4 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	e00a      	b.n	8001252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	f7ff fa52 	bl	80006e4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	; 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e053      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 020c 	and.w	r2, r3, #12
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	429a      	cmp	r2, r3
 8001262:	d1eb      	bne.n	800123c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d210      	bcs.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e032      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4916      	ldr	r1, [pc, #88]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	490e      	ldr	r1, [pc, #56]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d2:	f000 f821 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 80012d6:	4602      	mov	r2, r0
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	490a      	ldr	r1, [pc, #40]	; (800130c <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	5ccb      	ldrb	r3, [r1, r3]
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_RCC_ClockConfig+0x1cc>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_ClockConfig+0x1d0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f9b4 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000
 8001308:	40021000 	.word	0x40021000
 800130c:	08001cb0 	.word	0x08001cb0
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d002      	beq.n	8001348 <HAL_RCC_GetSysClockFreq+0x30>
 8001342:	2b08      	cmp	r3, #8
 8001344:	d003      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0x36>
 8001346:	e027      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800134a:	613b      	str	r3, [r7, #16]
      break;
 800134c:	e027      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d010      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0c5b      	lsrs	r3, r3, #17
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800137a:	fb03 f202 	mul.w	r2, r3, r2
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e004      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	613b      	str	r3, [r7, #16]
      break;
 8001396:	e002      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800139a:	613b      	str	r3, [r7, #16]
      break;
 800139c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139e:	693b      	ldr	r3, [r7, #16]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	00f42400 	.word	0x00f42400
 80013b4:	08001cc0 	.word	0x08001cc0
 80013b8:	08001cd0 	.word	0x08001cd0
 80013bc:	003d0900 	.word	0x003d0900
 80013c0:	007a1200 	.word	0x007a1200

080013c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <RCC_Delay+0x34>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <RCC_Delay+0x38>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0a5b      	lsrs	r3, r3, #9
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013e0:	bf00      	nop
  }
  while (Delay --);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1e5a      	subs	r2, r3, #1
 80013e6:	60fa      	str	r2, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f9      	bne.n	80013e0 <RCC_Delay+0x1c>
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000000 	.word	0x20000000
 80013fc:	10624dd3 	.word	0x10624dd3

08001400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e041      	b.n	8001496 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff f846 	bl	80004b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3304      	adds	r3, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 f992 	bl	8001768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_TIM_PWM_Start+0x24>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e022      	b.n	800150a <HAL_TIM_PWM_Start+0x6a>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d109      	bne.n	80014de <HAL_TIM_PWM_Start+0x3e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	e015      	b.n	800150a <HAL_TIM_PWM_Start+0x6a>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d109      	bne.n	80014f8 <HAL_TIM_PWM_Start+0x58>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	bf14      	ite	ne
 80014f0:	2301      	movne	r3, #1
 80014f2:	2300      	moveq	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e008      	b.n	800150a <HAL_TIM_PWM_Start+0x6a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e05e      	b.n	80015d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d104      	bne.n	8001522 <HAL_TIM_PWM_Start+0x82>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001520:	e013      	b.n	800154a <HAL_TIM_PWM_Start+0xaa>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d104      	bne.n	8001532 <HAL_TIM_PWM_Start+0x92>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001530:	e00b      	b.n	800154a <HAL_TIM_PWM_Start+0xaa>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b08      	cmp	r3, #8
 8001536:	d104      	bne.n	8001542 <HAL_TIM_PWM_Start+0xa2>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001540:	e003      	b.n	800154a <HAL_TIM_PWM_Start+0xaa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2202      	movs	r2, #2
 8001546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 faf2 	bl	8001b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_TIM_PWM_Start+0x138>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d107      	bne.n	8001572 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_TIM_PWM_Start+0x138>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00e      	beq.n	800159a <HAL_TIM_PWM_Start+0xfa>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001584:	d009      	beq.n	800159a <HAL_TIM_PWM_Start+0xfa>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HAL_TIM_PWM_Start+0x13c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d004      	beq.n	800159a <HAL_TIM_PWM_Start+0xfa>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_TIM_PWM_Start+0x140>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d111      	bne.n	80015be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b06      	cmp	r3, #6
 80015aa:	d010      	beq.n	80015ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015bc:	e007      	b.n	80015ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0201 	orr.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40000800 	.word	0x40000800

080015e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80015fe:	2302      	movs	r3, #2
 8001600:	e0ae      	b.n	8001760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0c      	cmp	r3, #12
 800160e:	f200 809f 	bhi.w	8001750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	0800164d 	.word	0x0800164d
 800161c:	08001751 	.word	0x08001751
 8001620:	08001751 	.word	0x08001751
 8001624:	08001751 	.word	0x08001751
 8001628:	0800168d 	.word	0x0800168d
 800162c:	08001751 	.word	0x08001751
 8001630:	08001751 	.word	0x08001751
 8001634:	08001751 	.word	0x08001751
 8001638:	080016cf 	.word	0x080016cf
 800163c:	08001751 	.word	0x08001751
 8001640:	08001751 	.word	0x08001751
 8001644:	08001751 	.word	0x08001751
 8001648:	0800170f 	.word	0x0800170f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f8ea 	bl	800182c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0208 	orr.w	r2, r2, #8
 8001666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0204 	bic.w	r2, r2, #4
 8001676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6999      	ldr	r1, [r3, #24]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	619a      	str	r2, [r3, #24]
      break;
 800168a:	e064      	b.n	8001756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f930 	bl	80018f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6999      	ldr	r1, [r3, #24]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	021a      	lsls	r2, r3, #8
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	619a      	str	r2, [r3, #24]
      break;
 80016cc:	e043      	b.n	8001756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f979 	bl	80019cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69da      	ldr	r2, [r3, #28]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0208 	orr.w	r2, r2, #8
 80016e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0204 	bic.w	r2, r2, #4
 80016f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69d9      	ldr	r1, [r3, #28]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	61da      	str	r2, [r3, #28]
      break;
 800170c:	e023      	b.n	8001756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f9c3 	bl	8001aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	69d9      	ldr	r1, [r3, #28]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	021a      	lsls	r2, r3, #8
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	61da      	str	r2, [r3, #28]
      break;
 800174e:	e002      	b.n	8001756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	75fb      	strb	r3, [r7, #23]
      break;
 8001754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a29      	ldr	r2, [pc, #164]	; (8001820 <TIM_Base_SetConfig+0xb8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00b      	beq.n	8001798 <TIM_Base_SetConfig+0x30>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001786:	d007      	beq.n	8001798 <TIM_Base_SetConfig+0x30>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a26      	ldr	r2, [pc, #152]	; (8001824 <TIM_Base_SetConfig+0xbc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d003      	beq.n	8001798 <TIM_Base_SetConfig+0x30>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a25      	ldr	r2, [pc, #148]	; (8001828 <TIM_Base_SetConfig+0xc0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d108      	bne.n	80017aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800179e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <TIM_Base_SetConfig+0xb8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00b      	beq.n	80017ca <TIM_Base_SetConfig+0x62>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d007      	beq.n	80017ca <TIM_Base_SetConfig+0x62>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <TIM_Base_SetConfig+0xbc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d003      	beq.n	80017ca <TIM_Base_SetConfig+0x62>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <TIM_Base_SetConfig+0xc0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d108      	bne.n	80017dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <TIM_Base_SetConfig+0xb8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d103      	bne.n	8001810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	615a      	str	r2, [r3, #20]
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40012c00 	.word	0x40012c00
 8001824:	40000400 	.word	0x40000400
 8001828:	40000800 	.word	0x40000800

0800182c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f023 0201 	bic.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800185a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 0303 	bic.w	r3, r3, #3
 8001862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f023 0302 	bic.w	r3, r3, #2
 8001874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <TIM_OC1_SetConfig+0xc8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d10c      	bne.n	80018a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f023 0308 	bic.w	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <TIM_OC1_SetConfig+0xc8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d111      	bne.n	80018ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	621a      	str	r2, [r3, #32]
}
 80018e8:	bf00      	nop
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f023 0210 	bic.w	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800192e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0320 	bic.w	r3, r3, #32
 8001942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <TIM_OC2_SetConfig+0xd0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d10d      	bne.n	8001974 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800195e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <TIM_OC2_SetConfig+0xd0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d113      	bne.n	80019a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800198a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	621a      	str	r2, [r3, #32]
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40012c00 	.word	0x40012c00

080019cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <TIM_OC3_SetConfig+0xd0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10d      	bne.n	8001a46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <TIM_OC3_SetConfig+0xd0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d113      	bne.n	8001a76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	621a      	str	r2, [r3, #32]
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40012c00 	.word	0x40012c00

08001aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <TIM_OC4_SetConfig+0x98>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d109      	bne.n	8001b14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	621a      	str	r2, [r3, #32]
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2201      	movs	r2, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	431a      	orrs	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	621a      	str	r2, [r3, #32]
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e046      	b.n	8001c2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00e      	beq.n	8001bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be8:	d009      	beq.n	8001bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10c      	bne.n	8001c18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800

08001c40 <__libc_init_array>:
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	2600      	movs	r6, #0
 8001c44:	4d0c      	ldr	r5, [pc, #48]	; (8001c78 <__libc_init_array+0x38>)
 8001c46:	4c0d      	ldr	r4, [pc, #52]	; (8001c7c <__libc_init_array+0x3c>)
 8001c48:	1b64      	subs	r4, r4, r5
 8001c4a:	10a4      	asrs	r4, r4, #2
 8001c4c:	42a6      	cmp	r6, r4
 8001c4e:	d109      	bne.n	8001c64 <__libc_init_array+0x24>
 8001c50:	f000 f822 	bl	8001c98 <_init>
 8001c54:	2600      	movs	r6, #0
 8001c56:	4d0a      	ldr	r5, [pc, #40]	; (8001c80 <__libc_init_array+0x40>)
 8001c58:	4c0a      	ldr	r4, [pc, #40]	; (8001c84 <__libc_init_array+0x44>)
 8001c5a:	1b64      	subs	r4, r4, r5
 8001c5c:	10a4      	asrs	r4, r4, #2
 8001c5e:	42a6      	cmp	r6, r4
 8001c60:	d105      	bne.n	8001c6e <__libc_init_array+0x2e>
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c68:	4798      	blx	r3
 8001c6a:	3601      	adds	r6, #1
 8001c6c:	e7ee      	b.n	8001c4c <__libc_init_array+0xc>
 8001c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c72:	4798      	blx	r3
 8001c74:	3601      	adds	r6, #1
 8001c76:	e7f2      	b.n	8001c5e <__libc_init_array+0x1e>
 8001c78:	08001cd4 	.word	0x08001cd4
 8001c7c:	08001cd4 	.word	0x08001cd4
 8001c80:	08001cd4 	.word	0x08001cd4
 8001c84:	08001cd8 	.word	0x08001cd8

08001c88 <memset>:
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4402      	add	r2, r0
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <memset+0xa>
 8001c90:	4770      	bx	lr
 8001c92:	f803 1b01 	strb.w	r1, [r3], #1
 8001c96:	e7f9      	b.n	8001c8c <memset+0x4>

08001c98 <_init>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	bf00      	nop
 8001c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9e:	bc08      	pop	{r3}
 8001ca0:	469e      	mov	lr, r3
 8001ca2:	4770      	bx	lr

08001ca4 <_fini>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	bf00      	nop
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr
